syntax = "proto3";

package vocabularypb;

import "vocabularypb/message.proto";

service VocabularyService {
  rpc SearchVocabulary(SearchVocabularyRequest) returns (SearchVocabularyResponse) {}
  rpc CreateCommunitySentenceDraft(CreateCommunitySentenceDraftRequest) returns (CreateCommunitySentenceDraftResponse) {}
  rpc UpdateCommunitySentenceDraft(UpdateCommunitySentenceDraftRequest) returns (UpdateCommunitySentenceDraftResponse) {}
  rpc PromoteCommunitySentenceDraft(PromoteCommunitySentenceDraftRequest) returns (PromoteCommunitySentenceDraftResponse) {}
  rpc LikeCommunitySentence(LikeCommunitySentenceRequest) returns (LikeCommunitySentenceResponse) {}
  rpc GetCommunitySentences(GetCommunitySentencesRequest) returns (GetCommunitySentencesResponse) {}
  rpc GetCommunitySentence(GetCommunitySentenceRequest) returns (GetCommunitySentenceResponse) {}
  rpc GetUserDraftCommunitySentences(GetUserDraftCommunitySentencesRequest) returns (GetUserDraftCommunitySentencesResponse) {}
  rpc BookmarkVocabulary(BookmarkVocabularyRequest) returns (BookmarkVocabularyResponse) {}
  rpc GetUserBookmarkedVocabularies(GetUserBookmarkedVocabulariesRequest) returns (GetUserBookmarkedVocabulariesResponse) {}
  rpc GetWordOfTheDay(GetWordOfTheDayRequest) returns (GetWordOfTheDayResponse) {}
}

// SEARCH VOCABULARY

message SearchVocabularyRequest {
  string performerId = 1;
  string term = 2;
}

message SearchVocabularyResponse {
  bool found = 1;
  repeated string suggestions = 2;
  Vocabulary vocabulary = 3;
}

// CREATE COMMUNITY SENTENCE DRAFT

message CreateCommunitySentenceDraftRequest {
  string userId = 1;
  string vocabularyId = 2;
  string sentence = 3;
  repeated string vocabularies = 4;
  string tense = 5;
}

message CreateCommunitySentenceDraftResponse {
  string id = 1;
}

// UPDATE COMMUNITY SENTENCE DRAFT

message UpdateCommunitySentenceDraftRequest {
  string userId = 1;
  string sentenceId = 2;
  string lang = 3;
  string sentence = 4;
}

message UpdateCommunitySentenceDraftResponse {}

// PROMOTE COMMUNITY SENTENCE DRAFT

message PromoteCommunitySentenceDraftRequest {
  string userId = 1;
  string sentenceId = 2;
}

message PromoteCommunitySentenceDraftResponse {}

// LIKE COMMUNITY SENTENCE

message LikeCommunitySentenceRequest {
  string userId = 1;
  string sentenceId = 2;
}

message LikeCommunitySentenceResponse {
  bool isLiked = 1;
}


// GET VOCABULARY COMMUNITY SENTENCES

message GetCommunitySentencesRequest {
  string vocabularyId = 1;
  string userId = 2;
  string lang = 3;
  string pageToken = 4;
}

message GetCommunitySentencesResponse {
  repeated CommunitySentenceBrief sentences = 1;
  string nextPageToken = 2;
}

// GET VOCABULARY COMMUNITY SENTENCE

message GetCommunitySentenceRequest {
  string sentenceId = 1;
  string userId = 2;
}

message GetCommunitySentenceResponse {
  CommunitySentence sentence = 1;
}

// GET USER DRAFT COMMUNITY SENTENCES

message GetUserDraftCommunitySentencesRequest {
  string vocabularyId = 1;
  string userId = 2;
  string pageToken = 3;
}

message GetUserDraftCommunitySentencesResponse {
  repeated CommunitySentenceDraft sentences = 1;
  string nextPageToken = 2;
}


// BOOKMARK VOCABULARY

message BookmarkVocabularyRequest {
  string userId = 1;
  string vocabularyId = 2;
}

message BookmarkVocabularyResponse {
  bool isBookmarked = 1;
}

// GET USER BOOKMARKED VOCABULARIES

message GetUserBookmarkedVocabulariesRequest {
  string userId = 1;
  string pageToken = 2;
}

message GetUserBookmarkedVocabulariesResponse {
  repeated VocabularyBrief vocabularies = 1;
  string nextPageToken = 2;
}

// GET WORD OF THE DAY

message GetWordOfTheDayRequest {
  string lang = 1;
}

message GetWordOfTheDayResponse {
  VocabularyBrief vocabulary = 1;
  Multilingual information = 2;
}