//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var UserExerciseInteractedHistories = newUserExerciseInteractedHistoriesTable("public", "user_exercise_interacted_histories", "")

type userExerciseInteractedHistoriesTable struct {
	postgres.Table

	// Columns
	ID         postgres.ColumnString
	ExerciseID postgres.ColumnString
	UserID     postgres.ColumnString
	Date       postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type UserExerciseInteractedHistoriesTable struct {
	userExerciseInteractedHistoriesTable

	EXCLUDED userExerciseInteractedHistoriesTable
}

// AS creates new UserExerciseInteractedHistoriesTable with assigned alias
func (a UserExerciseInteractedHistoriesTable) AS(alias string) *UserExerciseInteractedHistoriesTable {
	return newUserExerciseInteractedHistoriesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new UserExerciseInteractedHistoriesTable with assigned schema name
func (a UserExerciseInteractedHistoriesTable) FromSchema(schemaName string) *UserExerciseInteractedHistoriesTable {
	return newUserExerciseInteractedHistoriesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new UserExerciseInteractedHistoriesTable with assigned table prefix
func (a UserExerciseInteractedHistoriesTable) WithPrefix(prefix string) *UserExerciseInteractedHistoriesTable {
	return newUserExerciseInteractedHistoriesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new UserExerciseInteractedHistoriesTable with assigned table suffix
func (a UserExerciseInteractedHistoriesTable) WithSuffix(suffix string) *UserExerciseInteractedHistoriesTable {
	return newUserExerciseInteractedHistoriesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newUserExerciseInteractedHistoriesTable(schemaName, tableName, alias string) *UserExerciseInteractedHistoriesTable {
	return &UserExerciseInteractedHistoriesTable{
		userExerciseInteractedHistoriesTable: newUserExerciseInteractedHistoriesTableImpl(schemaName, tableName, alias),
		EXCLUDED:                             newUserExerciseInteractedHistoriesTableImpl("", "excluded", ""),
	}
}

func newUserExerciseInteractedHistoriesTableImpl(schemaName, tableName, alias string) userExerciseInteractedHistoriesTable {
	var (
		IDColumn         = postgres.StringColumn("id")
		ExerciseIDColumn = postgres.StringColumn("exercise_id")
		UserIDColumn     = postgres.StringColumn("user_id")
		DateColumn       = postgres.TimestampzColumn("date")
		allColumns       = postgres.ColumnList{IDColumn, ExerciseIDColumn, UserIDColumn, DateColumn}
		mutableColumns   = postgres.ColumnList{ExerciseIDColumn, UserIDColumn, DateColumn}
	)

	return userExerciseInteractedHistoriesTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:         IDColumn,
		ExerciseID: ExerciseIDColumn,
		UserID:     UserIDColumn,
		Date:       DateColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
