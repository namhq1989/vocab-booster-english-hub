//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Collections = newCollectionsTable("public", "collections", "")

type collectionsTable struct {
	postgres.Table

	// Columns
	ID              postgres.ColumnString
	UserID          postgres.ColumnString
	Name            postgres.ColumnString
	Description     postgres.ColumnString
	NumOfVocabulary postgres.ColumnInteger
	CreatedAt       postgres.ColumnTimestampz
	UpdatedAt       postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type CollectionsTable struct {
	collectionsTable

	EXCLUDED collectionsTable
}

// AS creates new CollectionsTable with assigned alias
func (a CollectionsTable) AS(alias string) *CollectionsTable {
	return newCollectionsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new CollectionsTable with assigned schema name
func (a CollectionsTable) FromSchema(schemaName string) *CollectionsTable {
	return newCollectionsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new CollectionsTable with assigned table prefix
func (a CollectionsTable) WithPrefix(prefix string) *CollectionsTable {
	return newCollectionsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new CollectionsTable with assigned table suffix
func (a CollectionsTable) WithSuffix(suffix string) *CollectionsTable {
	return newCollectionsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newCollectionsTable(schemaName, tableName, alias string) *CollectionsTable {
	return &CollectionsTable{
		collectionsTable: newCollectionsTableImpl(schemaName, tableName, alias),
		EXCLUDED:         newCollectionsTableImpl("", "excluded", ""),
	}
}

func newCollectionsTableImpl(schemaName, tableName, alias string) collectionsTable {
	var (
		IDColumn              = postgres.StringColumn("id")
		UserIDColumn          = postgres.StringColumn("user_id")
		NameColumn            = postgres.StringColumn("name")
		DescriptionColumn     = postgres.StringColumn("description")
		NumOfVocabularyColumn = postgres.IntegerColumn("num_of_vocabulary")
		CreatedAtColumn       = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn       = postgres.TimestampzColumn("updated_at")
		allColumns            = postgres.ColumnList{IDColumn, UserIDColumn, NameColumn, DescriptionColumn, NumOfVocabularyColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns        = postgres.ColumnList{UserIDColumn, NameColumn, DescriptionColumn, NumOfVocabularyColumn, CreatedAtColumn, UpdatedAtColumn}
	)

	return collectionsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:              IDColumn,
		UserID:          UserIDColumn,
		Name:            NameColumn,
		Description:     DescriptionColumn,
		NumOfVocabulary: NumOfVocabularyColumn,
		CreatedAt:       CreatedAtColumn,
		UpdatedAt:       UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
