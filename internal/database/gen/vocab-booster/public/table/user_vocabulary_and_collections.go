//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var UserVocabularyAndCollections = newUserVocabularyAndCollectionsTable("public", "user_vocabulary_and_collections", "")

type userVocabularyAndCollectionsTable struct {
	postgres.Table

	// Columns
	CollectionID     postgres.ColumnString
	UserVocabularyID postgres.ColumnString
	CreatedAt        postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type UserVocabularyAndCollectionsTable struct {
	userVocabularyAndCollectionsTable

	EXCLUDED userVocabularyAndCollectionsTable
}

// AS creates new UserVocabularyAndCollectionsTable with assigned alias
func (a UserVocabularyAndCollectionsTable) AS(alias string) *UserVocabularyAndCollectionsTable {
	return newUserVocabularyAndCollectionsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new UserVocabularyAndCollectionsTable with assigned schema name
func (a UserVocabularyAndCollectionsTable) FromSchema(schemaName string) *UserVocabularyAndCollectionsTable {
	return newUserVocabularyAndCollectionsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new UserVocabularyAndCollectionsTable with assigned table prefix
func (a UserVocabularyAndCollectionsTable) WithPrefix(prefix string) *UserVocabularyAndCollectionsTable {
	return newUserVocabularyAndCollectionsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new UserVocabularyAndCollectionsTable with assigned table suffix
func (a UserVocabularyAndCollectionsTable) WithSuffix(suffix string) *UserVocabularyAndCollectionsTable {
	return newUserVocabularyAndCollectionsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newUserVocabularyAndCollectionsTable(schemaName, tableName, alias string) *UserVocabularyAndCollectionsTable {
	return &UserVocabularyAndCollectionsTable{
		userVocabularyAndCollectionsTable: newUserVocabularyAndCollectionsTableImpl(schemaName, tableName, alias),
		EXCLUDED:                          newUserVocabularyAndCollectionsTableImpl("", "excluded", ""),
	}
}

func newUserVocabularyAndCollectionsTableImpl(schemaName, tableName, alias string) userVocabularyAndCollectionsTable {
	var (
		CollectionIDColumn     = postgres.StringColumn("collection_id")
		UserVocabularyIDColumn = postgres.StringColumn("user_vocabulary_id")
		CreatedAtColumn        = postgres.TimestampzColumn("created_at")
		allColumns             = postgres.ColumnList{CollectionIDColumn, UserVocabularyIDColumn, CreatedAtColumn}
		mutableColumns         = postgres.ColumnList{CreatedAtColumn}
	)

	return userVocabularyAndCollectionsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		CollectionID:     CollectionIDColumn,
		UserVocabularyID: UserVocabularyIDColumn,
		CreatedAt:        CreatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
