//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var WordOfTheDay = newWordOfTheDayTable("public", "word_of_the_day", "")

type wordOfTheDayTable struct {
	postgres.Table

	// Columns
	ID           postgres.ColumnString
	VocabularyID postgres.ColumnString
	Information  postgres.ColumnString
	Country      postgres.ColumnString
	Date         postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type WordOfTheDayTable struct {
	wordOfTheDayTable

	EXCLUDED wordOfTheDayTable
}

// AS creates new WordOfTheDayTable with assigned alias
func (a WordOfTheDayTable) AS(alias string) *WordOfTheDayTable {
	return newWordOfTheDayTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new WordOfTheDayTable with assigned schema name
func (a WordOfTheDayTable) FromSchema(schemaName string) *WordOfTheDayTable {
	return newWordOfTheDayTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new WordOfTheDayTable with assigned table prefix
func (a WordOfTheDayTable) WithPrefix(prefix string) *WordOfTheDayTable {
	return newWordOfTheDayTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new WordOfTheDayTable with assigned table suffix
func (a WordOfTheDayTable) WithSuffix(suffix string) *WordOfTheDayTable {
	return newWordOfTheDayTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newWordOfTheDayTable(schemaName, tableName, alias string) *WordOfTheDayTable {
	return &WordOfTheDayTable{
		wordOfTheDayTable: newWordOfTheDayTableImpl(schemaName, tableName, alias),
		EXCLUDED:          newWordOfTheDayTableImpl("", "excluded", ""),
	}
}

func newWordOfTheDayTableImpl(schemaName, tableName, alias string) wordOfTheDayTable {
	var (
		IDColumn           = postgres.StringColumn("id")
		VocabularyIDColumn = postgres.StringColumn("vocabulary_id")
		InformationColumn  = postgres.StringColumn("information")
		CountryColumn      = postgres.StringColumn("country")
		DateColumn         = postgres.TimestampzColumn("date")
		allColumns         = postgres.ColumnList{IDColumn, VocabularyIDColumn, InformationColumn, CountryColumn, DateColumn}
		mutableColumns     = postgres.ColumnList{VocabularyIDColumn, InformationColumn, CountryColumn, DateColumn}
	)

	return wordOfTheDayTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:           IDColumn,
		VocabularyID: VocabularyIDColumn,
		Information:  InformationColumn,
		Country:      CountryColumn,
		Date:         DateColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
