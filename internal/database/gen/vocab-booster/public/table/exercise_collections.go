//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var ExerciseCollections = newExerciseCollectionsTable("public", "exercise_collections", "")

type exerciseCollectionsTable struct {
	postgres.Table

	// Columns
	ID                 postgres.ColumnString
	Name               postgres.ColumnString
	Slug               postgres.ColumnString
	Criteria           postgres.ColumnString
	IsFromSystem       postgres.ColumnBool
	Order              postgres.ColumnInteger
	Image              postgres.ColumnString
	StatsExercises     postgres.ColumnInteger
	LastStatsUpdatedAt postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type ExerciseCollectionsTable struct {
	exerciseCollectionsTable

	EXCLUDED exerciseCollectionsTable
}

// AS creates new ExerciseCollectionsTable with assigned alias
func (a ExerciseCollectionsTable) AS(alias string) *ExerciseCollectionsTable {
	return newExerciseCollectionsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ExerciseCollectionsTable with assigned schema name
func (a ExerciseCollectionsTable) FromSchema(schemaName string) *ExerciseCollectionsTable {
	return newExerciseCollectionsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ExerciseCollectionsTable with assigned table prefix
func (a ExerciseCollectionsTable) WithPrefix(prefix string) *ExerciseCollectionsTable {
	return newExerciseCollectionsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ExerciseCollectionsTable with assigned table suffix
func (a ExerciseCollectionsTable) WithSuffix(suffix string) *ExerciseCollectionsTable {
	return newExerciseCollectionsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newExerciseCollectionsTable(schemaName, tableName, alias string) *ExerciseCollectionsTable {
	return &ExerciseCollectionsTable{
		exerciseCollectionsTable: newExerciseCollectionsTableImpl(schemaName, tableName, alias),
		EXCLUDED:                 newExerciseCollectionsTableImpl("", "excluded", ""),
	}
}

func newExerciseCollectionsTableImpl(schemaName, tableName, alias string) exerciseCollectionsTable {
	var (
		IDColumn                 = postgres.StringColumn("id")
		NameColumn               = postgres.StringColumn("name")
		SlugColumn               = postgres.StringColumn("slug")
		CriteriaColumn           = postgres.StringColumn("criteria")
		IsFromSystemColumn       = postgres.BoolColumn("is_from_system")
		OrderColumn              = postgres.IntegerColumn("order")
		ImageColumn              = postgres.StringColumn("image")
		StatsExercisesColumn     = postgres.IntegerColumn("stats_exercises")
		LastStatsUpdatedAtColumn = postgres.TimestampzColumn("last_stats_updated_at")
		allColumns               = postgres.ColumnList{IDColumn, NameColumn, SlugColumn, CriteriaColumn, IsFromSystemColumn, OrderColumn, ImageColumn, StatsExercisesColumn, LastStatsUpdatedAtColumn}
		mutableColumns           = postgres.ColumnList{NameColumn, SlugColumn, CriteriaColumn, IsFromSystemColumn, OrderColumn, ImageColumn, StatsExercisesColumn, LastStatsUpdatedAtColumn}
	)

	return exerciseCollectionsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                 IDColumn,
		Name:               NameColumn,
		Slug:               SlugColumn,
		Criteria:           CriteriaColumn,
		IsFromSystem:       IsFromSystemColumn,
		Order:              OrderColumn,
		Image:              ImageColumn,
		StatsExercises:     StatsExercisesColumn,
		LastStatsUpdatedAt: LastStatsUpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
