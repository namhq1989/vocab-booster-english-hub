//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var UserExerciseCollectionStatus = newUserExerciseCollectionStatusTable("public", "user_exercise_collection_status", "")

type userExerciseCollectionStatusTable struct {
	postgres.Table

	// Columns
	ID                  postgres.ColumnString
	UserID              postgres.ColumnString
	CollectionID        postgres.ColumnString
	InteractedExercises postgres.ColumnInteger

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type UserExerciseCollectionStatusTable struct {
	userExerciseCollectionStatusTable

	EXCLUDED userExerciseCollectionStatusTable
}

// AS creates new UserExerciseCollectionStatusTable with assigned alias
func (a UserExerciseCollectionStatusTable) AS(alias string) *UserExerciseCollectionStatusTable {
	return newUserExerciseCollectionStatusTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new UserExerciseCollectionStatusTable with assigned schema name
func (a UserExerciseCollectionStatusTable) FromSchema(schemaName string) *UserExerciseCollectionStatusTable {
	return newUserExerciseCollectionStatusTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new UserExerciseCollectionStatusTable with assigned table prefix
func (a UserExerciseCollectionStatusTable) WithPrefix(prefix string) *UserExerciseCollectionStatusTable {
	return newUserExerciseCollectionStatusTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new UserExerciseCollectionStatusTable with assigned table suffix
func (a UserExerciseCollectionStatusTable) WithSuffix(suffix string) *UserExerciseCollectionStatusTable {
	return newUserExerciseCollectionStatusTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newUserExerciseCollectionStatusTable(schemaName, tableName, alias string) *UserExerciseCollectionStatusTable {
	return &UserExerciseCollectionStatusTable{
		userExerciseCollectionStatusTable: newUserExerciseCollectionStatusTableImpl(schemaName, tableName, alias),
		EXCLUDED:                          newUserExerciseCollectionStatusTableImpl("", "excluded", ""),
	}
}

func newUserExerciseCollectionStatusTableImpl(schemaName, tableName, alias string) userExerciseCollectionStatusTable {
	var (
		IDColumn                  = postgres.StringColumn("id")
		UserIDColumn              = postgres.StringColumn("user_id")
		CollectionIDColumn        = postgres.StringColumn("collection_id")
		InteractedExercisesColumn = postgres.IntegerColumn("interacted_exercises")
		allColumns                = postgres.ColumnList{IDColumn, UserIDColumn, CollectionIDColumn, InteractedExercisesColumn}
		mutableColumns            = postgres.ColumnList{IDColumn, InteractedExercisesColumn}
	)

	return userExerciseCollectionStatusTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                  IDColumn,
		UserID:              UserIDColumn,
		CollectionID:        CollectionIDColumn,
		InteractedExercises: InteractedExercisesColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
