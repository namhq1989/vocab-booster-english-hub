//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var UserVocabularyCollections = newUserVocabularyCollectionsTable("public", "user_vocabulary_collections", "")

type userVocabularyCollectionsTable struct {
	postgres.Table

	// Columns
	ID              postgres.ColumnString
	UserID          postgres.ColumnString
	Name            postgres.ColumnString
	NumOfVocabulary postgres.ColumnInteger
	CreatedAt       postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type UserVocabularyCollectionsTable struct {
	userVocabularyCollectionsTable

	EXCLUDED userVocabularyCollectionsTable
}

// AS creates new UserVocabularyCollectionsTable with assigned alias
func (a UserVocabularyCollectionsTable) AS(alias string) *UserVocabularyCollectionsTable {
	return newUserVocabularyCollectionsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new UserVocabularyCollectionsTable with assigned schema name
func (a UserVocabularyCollectionsTable) FromSchema(schemaName string) *UserVocabularyCollectionsTable {
	return newUserVocabularyCollectionsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new UserVocabularyCollectionsTable with assigned table prefix
func (a UserVocabularyCollectionsTable) WithPrefix(prefix string) *UserVocabularyCollectionsTable {
	return newUserVocabularyCollectionsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new UserVocabularyCollectionsTable with assigned table suffix
func (a UserVocabularyCollectionsTable) WithSuffix(suffix string) *UserVocabularyCollectionsTable {
	return newUserVocabularyCollectionsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newUserVocabularyCollectionsTable(schemaName, tableName, alias string) *UserVocabularyCollectionsTable {
	return &UserVocabularyCollectionsTable{
		userVocabularyCollectionsTable: newUserVocabularyCollectionsTableImpl(schemaName, tableName, alias),
		EXCLUDED:                       newUserVocabularyCollectionsTableImpl("", "excluded", ""),
	}
}

func newUserVocabularyCollectionsTableImpl(schemaName, tableName, alias string) userVocabularyCollectionsTable {
	var (
		IDColumn              = postgres.StringColumn("id")
		UserIDColumn          = postgres.StringColumn("user_id")
		NameColumn            = postgres.StringColumn("name")
		NumOfVocabularyColumn = postgres.IntegerColumn("num_of_vocabulary")
		CreatedAtColumn       = postgres.TimestampzColumn("created_at")
		allColumns            = postgres.ColumnList{IDColumn, UserIDColumn, NameColumn, NumOfVocabularyColumn, CreatedAtColumn}
		mutableColumns        = postgres.ColumnList{UserIDColumn, NameColumn, NumOfVocabularyColumn, CreatedAtColumn}
	)

	return userVocabularyCollectionsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:              IDColumn,
		UserID:          UserIDColumn,
		Name:            NameColumn,
		NumOfVocabulary: NumOfVocabularyColumn,
		CreatedAt:       CreatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
