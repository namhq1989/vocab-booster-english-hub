//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var CollectionAndVocabularies = newCollectionAndVocabulariesTable("public", "collection_and_vocabularies", "")

type collectionAndVocabulariesTable struct {
	postgres.Table

	// Columns
	ID           postgres.ColumnString
	CollectionID postgres.ColumnString
	VocabularyID postgres.ColumnString
	Value        postgres.ColumnString
	CreatedAt    postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type CollectionAndVocabulariesTable struct {
	collectionAndVocabulariesTable

	EXCLUDED collectionAndVocabulariesTable
}

// AS creates new CollectionAndVocabulariesTable with assigned alias
func (a CollectionAndVocabulariesTable) AS(alias string) *CollectionAndVocabulariesTable {
	return newCollectionAndVocabulariesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new CollectionAndVocabulariesTable with assigned schema name
func (a CollectionAndVocabulariesTable) FromSchema(schemaName string) *CollectionAndVocabulariesTable {
	return newCollectionAndVocabulariesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new CollectionAndVocabulariesTable with assigned table prefix
func (a CollectionAndVocabulariesTable) WithPrefix(prefix string) *CollectionAndVocabulariesTable {
	return newCollectionAndVocabulariesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new CollectionAndVocabulariesTable with assigned table suffix
func (a CollectionAndVocabulariesTable) WithSuffix(suffix string) *CollectionAndVocabulariesTable {
	return newCollectionAndVocabulariesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newCollectionAndVocabulariesTable(schemaName, tableName, alias string) *CollectionAndVocabulariesTable {
	return &CollectionAndVocabulariesTable{
		collectionAndVocabulariesTable: newCollectionAndVocabulariesTableImpl(schemaName, tableName, alias),
		EXCLUDED:                       newCollectionAndVocabulariesTableImpl("", "excluded", ""),
	}
}

func newCollectionAndVocabulariesTableImpl(schemaName, tableName, alias string) collectionAndVocabulariesTable {
	var (
		IDColumn           = postgres.StringColumn("id")
		CollectionIDColumn = postgres.StringColumn("collection_id")
		VocabularyIDColumn = postgres.StringColumn("vocabulary_id")
		ValueColumn        = postgres.StringColumn("value")
		CreatedAtColumn    = postgres.TimestampzColumn("created_at")
		allColumns         = postgres.ColumnList{IDColumn, CollectionIDColumn, VocabularyIDColumn, ValueColumn, CreatedAtColumn}
		mutableColumns     = postgres.ColumnList{IDColumn, ValueColumn, CreatedAtColumn}
	)

	return collectionAndVocabulariesTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:           IDColumn,
		CollectionID: CollectionIDColumn,
		VocabularyID: VocabularyIDColumn,
		Value:        ValueColumn,
		CreatedAt:    CreatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
