//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var VerbConjugations = newVerbConjugationsTable("public", "verb_conjugations", "")

type verbConjugationsTable struct {
	postgres.Table

	// Columns
	ID           postgres.ColumnString
	VocabularyID postgres.ColumnString
	Value        postgres.ColumnString
	Base         postgres.ColumnString
	Form         postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type VerbConjugationsTable struct {
	verbConjugationsTable

	EXCLUDED verbConjugationsTable
}

// AS creates new VerbConjugationsTable with assigned alias
func (a VerbConjugationsTable) AS(alias string) *VerbConjugationsTable {
	return newVerbConjugationsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new VerbConjugationsTable with assigned schema name
func (a VerbConjugationsTable) FromSchema(schemaName string) *VerbConjugationsTable {
	return newVerbConjugationsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new VerbConjugationsTable with assigned table prefix
func (a VerbConjugationsTable) WithPrefix(prefix string) *VerbConjugationsTable {
	return newVerbConjugationsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new VerbConjugationsTable with assigned table suffix
func (a VerbConjugationsTable) WithSuffix(suffix string) *VerbConjugationsTable {
	return newVerbConjugationsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newVerbConjugationsTable(schemaName, tableName, alias string) *VerbConjugationsTable {
	return &VerbConjugationsTable{
		verbConjugationsTable: newVerbConjugationsTableImpl(schemaName, tableName, alias),
		EXCLUDED:              newVerbConjugationsTableImpl("", "excluded", ""),
	}
}

func newVerbConjugationsTableImpl(schemaName, tableName, alias string) verbConjugationsTable {
	var (
		IDColumn           = postgres.StringColumn("id")
		VocabularyIDColumn = postgres.StringColumn("vocabulary_id")
		ValueColumn        = postgres.StringColumn("value")
		BaseColumn         = postgres.StringColumn("base")
		FormColumn         = postgres.StringColumn("form")
		allColumns         = postgres.ColumnList{IDColumn, VocabularyIDColumn, ValueColumn, BaseColumn, FormColumn}
		mutableColumns     = postgres.ColumnList{VocabularyIDColumn, ValueColumn, BaseColumn, FormColumn}
	)

	return verbConjugationsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:           IDColumn,
		VocabularyID: VocabularyIDColumn,
		Value:        ValueColumn,
		Base:         BaseColumn,
		Form:         FormColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
