//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var CommunitySentenceDrafts = newCommunitySentenceDraftsTable("public", "community_sentence_drafts", "")

type communitySentenceDraftsTable struct {
	postgres.Table

	// Columns
	ID                   postgres.ColumnString
	UserID               postgres.ColumnString
	VocabularyID         postgres.ColumnString
	Content              postgres.ColumnString
	RequiredVocabularies postgres.ColumnString
	RequiredTense        postgres.ColumnString
	IsCorrect            postgres.ColumnBool
	GrammarErrors        postgres.ColumnString
	ErrorCode            postgres.ColumnString
	Sentiment            postgres.ColumnString
	Clauses              postgres.ColumnString
	CreatedAt            postgres.ColumnTimestampz
	UpdatedAt            postgres.ColumnTimestampz
	Level                postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type CommunitySentenceDraftsTable struct {
	communitySentenceDraftsTable

	EXCLUDED communitySentenceDraftsTable
}

// AS creates new CommunitySentenceDraftsTable with assigned alias
func (a CommunitySentenceDraftsTable) AS(alias string) *CommunitySentenceDraftsTable {
	return newCommunitySentenceDraftsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new CommunitySentenceDraftsTable with assigned schema name
func (a CommunitySentenceDraftsTable) FromSchema(schemaName string) *CommunitySentenceDraftsTable {
	return newCommunitySentenceDraftsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new CommunitySentenceDraftsTable with assigned table prefix
func (a CommunitySentenceDraftsTable) WithPrefix(prefix string) *CommunitySentenceDraftsTable {
	return newCommunitySentenceDraftsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new CommunitySentenceDraftsTable with assigned table suffix
func (a CommunitySentenceDraftsTable) WithSuffix(suffix string) *CommunitySentenceDraftsTable {
	return newCommunitySentenceDraftsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newCommunitySentenceDraftsTable(schemaName, tableName, alias string) *CommunitySentenceDraftsTable {
	return &CommunitySentenceDraftsTable{
		communitySentenceDraftsTable: newCommunitySentenceDraftsTableImpl(schemaName, tableName, alias),
		EXCLUDED:                     newCommunitySentenceDraftsTableImpl("", "excluded", ""),
	}
}

func newCommunitySentenceDraftsTableImpl(schemaName, tableName, alias string) communitySentenceDraftsTable {
	var (
		IDColumn                   = postgres.StringColumn("id")
		UserIDColumn               = postgres.StringColumn("user_id")
		VocabularyIDColumn         = postgres.StringColumn("vocabulary_id")
		ContentColumn              = postgres.StringColumn("content")
		RequiredVocabulariesColumn = postgres.StringColumn("required_vocabularies")
		RequiredTenseColumn        = postgres.StringColumn("required_tense")
		IsCorrectColumn            = postgres.BoolColumn("is_correct")
		GrammarErrorsColumn        = postgres.StringColumn("grammar_errors")
		ErrorCodeColumn            = postgres.StringColumn("error_code")
		SentimentColumn            = postgres.StringColumn("sentiment")
		ClausesColumn              = postgres.StringColumn("clauses")
		CreatedAtColumn            = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn            = postgres.TimestampzColumn("updated_at")
		LevelColumn                = postgres.StringColumn("level")
		allColumns                 = postgres.ColumnList{IDColumn, UserIDColumn, VocabularyIDColumn, ContentColumn, RequiredVocabulariesColumn, RequiredTenseColumn, IsCorrectColumn, GrammarErrorsColumn, ErrorCodeColumn, SentimentColumn, ClausesColumn, CreatedAtColumn, UpdatedAtColumn, LevelColumn}
		mutableColumns             = postgres.ColumnList{UserIDColumn, VocabularyIDColumn, ContentColumn, RequiredVocabulariesColumn, RequiredTenseColumn, IsCorrectColumn, GrammarErrorsColumn, ErrorCodeColumn, SentimentColumn, ClausesColumn, CreatedAtColumn, UpdatedAtColumn, LevelColumn}
	)

	return communitySentenceDraftsTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                   IDColumn,
		UserID:               UserIDColumn,
		VocabularyID:         VocabularyIDColumn,
		Content:              ContentColumn,
		RequiredVocabularies: RequiredVocabulariesColumn,
		RequiredTense:        RequiredTenseColumn,
		IsCorrect:            IsCorrectColumn,
		GrammarErrors:        GrammarErrorsColumn,
		ErrorCode:            ErrorCodeColumn,
		Sentiment:            SentimentColumn,
		Clauses:              ClausesColumn,
		CreatedAt:            CreatedAtColumn,
		UpdatedAt:            UpdatedAtColumn,
		Level:                LevelColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
