//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var CommunitySentences = newCommunitySentencesTable("public", "community_sentences", "")

type communitySentencesTable struct {
	postgres.Table

	// Columns
	ID                   postgres.ColumnString
	UserID               postgres.ColumnString
	VocabularyID         postgres.ColumnString
	Content              postgres.ColumnString
	RequiredVocabularies postgres.ColumnString
	RequiredTense        postgres.ColumnString
	Sentiment            postgres.ColumnString
	Clauses              postgres.ColumnString
	PosTags              postgres.ColumnString
	Dependencies         postgres.ColumnString
	Verbs                postgres.ColumnString
	Level                postgres.ColumnString
	StatsLike            postgres.ColumnInteger
	CreatedAt            postgres.ColumnTimestampz
	MainWord             postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type CommunitySentencesTable struct {
	communitySentencesTable

	EXCLUDED communitySentencesTable
}

// AS creates new CommunitySentencesTable with assigned alias
func (a CommunitySentencesTable) AS(alias string) *CommunitySentencesTable {
	return newCommunitySentencesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new CommunitySentencesTable with assigned schema name
func (a CommunitySentencesTable) FromSchema(schemaName string) *CommunitySentencesTable {
	return newCommunitySentencesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new CommunitySentencesTable with assigned table prefix
func (a CommunitySentencesTable) WithPrefix(prefix string) *CommunitySentencesTable {
	return newCommunitySentencesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new CommunitySentencesTable with assigned table suffix
func (a CommunitySentencesTable) WithSuffix(suffix string) *CommunitySentencesTable {
	return newCommunitySentencesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newCommunitySentencesTable(schemaName, tableName, alias string) *CommunitySentencesTable {
	return &CommunitySentencesTable{
		communitySentencesTable: newCommunitySentencesTableImpl(schemaName, tableName, alias),
		EXCLUDED:                newCommunitySentencesTableImpl("", "excluded", ""),
	}
}

func newCommunitySentencesTableImpl(schemaName, tableName, alias string) communitySentencesTable {
	var (
		IDColumn                   = postgres.StringColumn("id")
		UserIDColumn               = postgres.StringColumn("user_id")
		VocabularyIDColumn         = postgres.StringColumn("vocabulary_id")
		ContentColumn              = postgres.StringColumn("content")
		RequiredVocabulariesColumn = postgres.StringColumn("required_vocabularies")
		RequiredTenseColumn        = postgres.StringColumn("required_tense")
		SentimentColumn            = postgres.StringColumn("sentiment")
		ClausesColumn              = postgres.StringColumn("clauses")
		PosTagsColumn              = postgres.StringColumn("pos_tags")
		DependenciesColumn         = postgres.StringColumn("dependencies")
		VerbsColumn                = postgres.StringColumn("verbs")
		LevelColumn                = postgres.StringColumn("level")
		StatsLikeColumn            = postgres.IntegerColumn("stats_like")
		CreatedAtColumn            = postgres.TimestampzColumn("created_at")
		MainWordColumn             = postgres.StringColumn("main_word")
		allColumns                 = postgres.ColumnList{IDColumn, UserIDColumn, VocabularyIDColumn, ContentColumn, RequiredVocabulariesColumn, RequiredTenseColumn, SentimentColumn, ClausesColumn, PosTagsColumn, DependenciesColumn, VerbsColumn, LevelColumn, StatsLikeColumn, CreatedAtColumn, MainWordColumn}
		mutableColumns             = postgres.ColumnList{UserIDColumn, VocabularyIDColumn, ContentColumn, RequiredVocabulariesColumn, RequiredTenseColumn, SentimentColumn, ClausesColumn, PosTagsColumn, DependenciesColumn, VerbsColumn, LevelColumn, StatsLikeColumn, CreatedAtColumn, MainWordColumn}
	)

	return communitySentencesTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                   IDColumn,
		UserID:               UserIDColumn,
		VocabularyID:         VocabularyIDColumn,
		Content:              ContentColumn,
		RequiredVocabularies: RequiredVocabulariesColumn,
		RequiredTense:        RequiredTenseColumn,
		Sentiment:            SentimentColumn,
		Clauses:              ClausesColumn,
		PosTags:              PosTagsColumn,
		Dependencies:         DependenciesColumn,
		Verbs:                VerbsColumn,
		Level:                LevelColumn,
		StatsLike:            StatsLikeColumn,
		CreatedAt:            CreatedAtColumn,
		MainWord:             MainWordColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
