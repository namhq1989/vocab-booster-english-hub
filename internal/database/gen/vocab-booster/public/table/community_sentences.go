//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var CommunitySentences = newCommunitySentencesTable("public", "community_sentences", "")

type communitySentencesTable struct {
	postgres.Table

	// Columns
	ID                 postgres.ColumnString
	UserID             postgres.ColumnString
	VocabularyID       postgres.ColumnString
	Content            postgres.ColumnString
	RequiredVocabulary postgres.ColumnString
	RequiredTense      postgres.ColumnString
	Translated         postgres.ColumnString
	Sentiment          postgres.ColumnString
	Clauses            postgres.ColumnString
	StatsVote          postgres.ColumnInteger
	StatsComment       postgres.ColumnInteger
	CreatedAt          postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type CommunitySentencesTable struct {
	communitySentencesTable

	EXCLUDED communitySentencesTable
}

// AS creates new CommunitySentencesTable with assigned alias
func (a CommunitySentencesTable) AS(alias string) *CommunitySentencesTable {
	return newCommunitySentencesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new CommunitySentencesTable with assigned schema name
func (a CommunitySentencesTable) FromSchema(schemaName string) *CommunitySentencesTable {
	return newCommunitySentencesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new CommunitySentencesTable with assigned table prefix
func (a CommunitySentencesTable) WithPrefix(prefix string) *CommunitySentencesTable {
	return newCommunitySentencesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new CommunitySentencesTable with assigned table suffix
func (a CommunitySentencesTable) WithSuffix(suffix string) *CommunitySentencesTable {
	return newCommunitySentencesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newCommunitySentencesTable(schemaName, tableName, alias string) *CommunitySentencesTable {
	return &CommunitySentencesTable{
		communitySentencesTable: newCommunitySentencesTableImpl(schemaName, tableName, alias),
		EXCLUDED:                newCommunitySentencesTableImpl("", "excluded", ""),
	}
}

func newCommunitySentencesTableImpl(schemaName, tableName, alias string) communitySentencesTable {
	var (
		IDColumn                 = postgres.StringColumn("id")
		UserIDColumn             = postgres.StringColumn("user_id")
		VocabularyIDColumn       = postgres.StringColumn("vocabulary_id")
		ContentColumn            = postgres.StringColumn("content")
		RequiredVocabularyColumn = postgres.StringColumn("required_vocabulary")
		RequiredTenseColumn      = postgres.StringColumn("required_tense")
		TranslatedColumn         = postgres.StringColumn("translated")
		SentimentColumn          = postgres.StringColumn("sentiment")
		ClausesColumn            = postgres.StringColumn("clauses")
		StatsVoteColumn          = postgres.IntegerColumn("stats_vote")
		StatsCommentColumn       = postgres.IntegerColumn("stats_comment")
		CreatedAtColumn          = postgres.TimestampzColumn("created_at")
		allColumns               = postgres.ColumnList{IDColumn, UserIDColumn, VocabularyIDColumn, ContentColumn, RequiredVocabularyColumn, RequiredTenseColumn, TranslatedColumn, SentimentColumn, ClausesColumn, StatsVoteColumn, StatsCommentColumn, CreatedAtColumn}
		mutableColumns           = postgres.ColumnList{UserIDColumn, VocabularyIDColumn, ContentColumn, RequiredVocabularyColumn, RequiredTenseColumn, TranslatedColumn, SentimentColumn, ClausesColumn, StatsVoteColumn, StatsCommentColumn, CreatedAtColumn}
	)

	return communitySentencesTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                 IDColumn,
		UserID:             UserIDColumn,
		VocabularyID:       VocabularyIDColumn,
		Content:            ContentColumn,
		RequiredVocabulary: RequiredVocabularyColumn,
		RequiredTense:      RequiredTenseColumn,
		Translated:         TranslatedColumn,
		Sentiment:          SentimentColumn,
		Clauses:            ClausesColumn,
		StatsVote:          StatsVoteColumn,
		StatsComment:       StatsCommentColumn,
		CreatedAt:          CreatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
