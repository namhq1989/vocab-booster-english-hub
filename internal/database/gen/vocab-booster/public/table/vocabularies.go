//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var Vocabularies = newVocabulariesTable("public", "vocabularies", "")

type vocabulariesTable struct {
	postgres.Table

	// Columns
	ID            postgres.ColumnString
	AuthorID      postgres.ColumnString
	Term          postgres.ColumnString
	PartsOfSpeech postgres.ColumnString
	Ipa           postgres.ColumnString
	Audio         postgres.ColumnString
	Synonyms      postgres.ColumnString
	Antonyms      postgres.ColumnString
	CreatedAt     postgres.ColumnTimestampz
	UpdatedAt     postgres.ColumnTimestampz
	Frequency     postgres.ColumnFloat

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type VocabulariesTable struct {
	vocabulariesTable

	EXCLUDED vocabulariesTable
}

// AS creates new VocabulariesTable with assigned alias
func (a VocabulariesTable) AS(alias string) *VocabulariesTable {
	return newVocabulariesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new VocabulariesTable with assigned schema name
func (a VocabulariesTable) FromSchema(schemaName string) *VocabulariesTable {
	return newVocabulariesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new VocabulariesTable with assigned table prefix
func (a VocabulariesTable) WithPrefix(prefix string) *VocabulariesTable {
	return newVocabulariesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new VocabulariesTable with assigned table suffix
func (a VocabulariesTable) WithSuffix(suffix string) *VocabulariesTable {
	return newVocabulariesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newVocabulariesTable(schemaName, tableName, alias string) *VocabulariesTable {
	return &VocabulariesTable{
		vocabulariesTable: newVocabulariesTableImpl(schemaName, tableName, alias),
		EXCLUDED:          newVocabulariesTableImpl("", "excluded", ""),
	}
}

func newVocabulariesTableImpl(schemaName, tableName, alias string) vocabulariesTable {
	var (
		IDColumn            = postgres.StringColumn("id")
		AuthorIDColumn      = postgres.StringColumn("author_id")
		TermColumn          = postgres.StringColumn("term")
		PartsOfSpeechColumn = postgres.StringColumn("parts_of_speech")
		IpaColumn           = postgres.StringColumn("ipa")
		AudioColumn         = postgres.StringColumn("audio")
		SynonymsColumn      = postgres.StringColumn("synonyms")
		AntonymsColumn      = postgres.StringColumn("antonyms")
		CreatedAtColumn     = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn     = postgres.TimestampzColumn("updated_at")
		FrequencyColumn     = postgres.FloatColumn("frequency")
		allColumns          = postgres.ColumnList{IDColumn, AuthorIDColumn, TermColumn, PartsOfSpeechColumn, IpaColumn, AudioColumn, SynonymsColumn, AntonymsColumn, CreatedAtColumn, UpdatedAtColumn, FrequencyColumn}
		mutableColumns      = postgres.ColumnList{AuthorIDColumn, TermColumn, PartsOfSpeechColumn, IpaColumn, AudioColumn, SynonymsColumn, AntonymsColumn, CreatedAtColumn, UpdatedAtColumn, FrequencyColumn}
	)

	return vocabulariesTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:            IDColumn,
		AuthorID:      AuthorIDColumn,
		Term:          TermColumn,
		PartsOfSpeech: PartsOfSpeechColumn,
		Ipa:           IpaColumn,
		Audio:         AudioColumn,
		Synonyms:      SynonymsColumn,
		Antonyms:      AntonymsColumn,
		CreatedAt:     CreatedAtColumn,
		UpdatedAt:     UpdatedAtColumn,
		Frequency:     FrequencyColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
