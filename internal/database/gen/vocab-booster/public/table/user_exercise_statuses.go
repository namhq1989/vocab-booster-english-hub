//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var UserExerciseStatuses = newUserExerciseStatusesTable("public", "user_exercise_statuses", "")

type userExerciseStatusesTable struct {
	postgres.Table

	// Columns
	ID            postgres.ColumnString
	ExerciseID    postgres.ColumnString
	UserID        postgres.ColumnString
	CorrectStreak postgres.ColumnInteger
	IsFavorite    postgres.ColumnBool
	IsMastered    postgres.ColumnBool
	UpdatedAt     postgres.ColumnTimestampz
	NextReviewAt  postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type UserExerciseStatusesTable struct {
	userExerciseStatusesTable

	EXCLUDED userExerciseStatusesTable
}

// AS creates new UserExerciseStatusesTable with assigned alias
func (a UserExerciseStatusesTable) AS(alias string) *UserExerciseStatusesTable {
	return newUserExerciseStatusesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new UserExerciseStatusesTable with assigned schema name
func (a UserExerciseStatusesTable) FromSchema(schemaName string) *UserExerciseStatusesTable {
	return newUserExerciseStatusesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new UserExerciseStatusesTable with assigned table prefix
func (a UserExerciseStatusesTable) WithPrefix(prefix string) *UserExerciseStatusesTable {
	return newUserExerciseStatusesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new UserExerciseStatusesTable with assigned table suffix
func (a UserExerciseStatusesTable) WithSuffix(suffix string) *UserExerciseStatusesTable {
	return newUserExerciseStatusesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newUserExerciseStatusesTable(schemaName, tableName, alias string) *UserExerciseStatusesTable {
	return &UserExerciseStatusesTable{
		userExerciseStatusesTable: newUserExerciseStatusesTableImpl(schemaName, tableName, alias),
		EXCLUDED:                  newUserExerciseStatusesTableImpl("", "excluded", ""),
	}
}

func newUserExerciseStatusesTableImpl(schemaName, tableName, alias string) userExerciseStatusesTable {
	var (
		IDColumn            = postgres.StringColumn("id")
		ExerciseIDColumn    = postgres.StringColumn("exercise_id")
		UserIDColumn        = postgres.StringColumn("user_id")
		CorrectStreakColumn = postgres.IntegerColumn("correct_streak")
		IsFavoriteColumn    = postgres.BoolColumn("is_favorite")
		IsMasteredColumn    = postgres.BoolColumn("is_mastered")
		UpdatedAtColumn     = postgres.TimestampzColumn("updated_at")
		NextReviewAtColumn  = postgres.TimestampzColumn("next_review_at")
		allColumns          = postgres.ColumnList{IDColumn, ExerciseIDColumn, UserIDColumn, CorrectStreakColumn, IsFavoriteColumn, IsMasteredColumn, UpdatedAtColumn, NextReviewAtColumn}
		mutableColumns      = postgres.ColumnList{ExerciseIDColumn, UserIDColumn, CorrectStreakColumn, IsFavoriteColumn, IsMasteredColumn, UpdatedAtColumn, NextReviewAtColumn}
	)

	return userExerciseStatusesTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:            IDColumn,
		ExerciseID:    ExerciseIDColumn,
		UserID:        UserIDColumn,
		CorrectStreak: CorrectStreakColumn,
		IsFavorite:    IsFavoriteColumn,
		IsMastered:    IsMasteredColumn,
		UpdatedAt:     UpdatedAtColumn,
		NextReviewAt:  NextReviewAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
