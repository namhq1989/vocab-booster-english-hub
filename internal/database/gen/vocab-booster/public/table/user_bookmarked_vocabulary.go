//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var UserBookmarkedVocabulary = newUserBookmarkedVocabularyTable("public", "user_bookmarked_vocabulary", "")

type userBookmarkedVocabularyTable struct {
	postgres.Table

	// Columns
	ID           postgres.ColumnString
	UserID       postgres.ColumnString
	VocabularyID postgres.ColumnString
	BookmarkedAt postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type UserBookmarkedVocabularyTable struct {
	userBookmarkedVocabularyTable

	EXCLUDED userBookmarkedVocabularyTable
}

// AS creates new UserBookmarkedVocabularyTable with assigned alias
func (a UserBookmarkedVocabularyTable) AS(alias string) *UserBookmarkedVocabularyTable {
	return newUserBookmarkedVocabularyTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new UserBookmarkedVocabularyTable with assigned schema name
func (a UserBookmarkedVocabularyTable) FromSchema(schemaName string) *UserBookmarkedVocabularyTable {
	return newUserBookmarkedVocabularyTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new UserBookmarkedVocabularyTable with assigned table prefix
func (a UserBookmarkedVocabularyTable) WithPrefix(prefix string) *UserBookmarkedVocabularyTable {
	return newUserBookmarkedVocabularyTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new UserBookmarkedVocabularyTable with assigned table suffix
func (a UserBookmarkedVocabularyTable) WithSuffix(suffix string) *UserBookmarkedVocabularyTable {
	return newUserBookmarkedVocabularyTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newUserBookmarkedVocabularyTable(schemaName, tableName, alias string) *UserBookmarkedVocabularyTable {
	return &UserBookmarkedVocabularyTable{
		userBookmarkedVocabularyTable: newUserBookmarkedVocabularyTableImpl(schemaName, tableName, alias),
		EXCLUDED:                      newUserBookmarkedVocabularyTableImpl("", "excluded", ""),
	}
}

func newUserBookmarkedVocabularyTableImpl(schemaName, tableName, alias string) userBookmarkedVocabularyTable {
	var (
		IDColumn           = postgres.StringColumn("id")
		UserIDColumn       = postgres.StringColumn("user_id")
		VocabularyIDColumn = postgres.StringColumn("vocabulary_id")
		BookmarkedAtColumn = postgres.TimestampzColumn("bookmarked_at")
		allColumns         = postgres.ColumnList{IDColumn, UserIDColumn, VocabularyIDColumn, BookmarkedAtColumn}
		mutableColumns     = postgres.ColumnList{IDColumn, BookmarkedAtColumn}
	)

	return userBookmarkedVocabularyTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:           IDColumn,
		UserID:       UserIDColumn,
		VocabularyID: VocabularyIDColumn,
		BookmarkedAt: BookmarkedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
