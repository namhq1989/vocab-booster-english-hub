//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var UserVocabularies = newUserVocabulariesTable("public", "user_vocabularies", "")

type userVocabulariesTable struct {
	postgres.Table

	// Columns
	ID           postgres.ColumnString
	UserID       postgres.ColumnString
	VocabularyID postgres.ColumnString
	Value        postgres.ColumnString
	CreatedAt    postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
}

type UserVocabulariesTable struct {
	userVocabulariesTable

	EXCLUDED userVocabulariesTable
}

// AS creates new UserVocabulariesTable with assigned alias
func (a UserVocabulariesTable) AS(alias string) *UserVocabulariesTable {
	return newUserVocabulariesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new UserVocabulariesTable with assigned schema name
func (a UserVocabulariesTable) FromSchema(schemaName string) *UserVocabulariesTable {
	return newUserVocabulariesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new UserVocabulariesTable with assigned table prefix
func (a UserVocabulariesTable) WithPrefix(prefix string) *UserVocabulariesTable {
	return newUserVocabulariesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new UserVocabulariesTable with assigned table suffix
func (a UserVocabulariesTable) WithSuffix(suffix string) *UserVocabulariesTable {
	return newUserVocabulariesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newUserVocabulariesTable(schemaName, tableName, alias string) *UserVocabulariesTable {
	return &UserVocabulariesTable{
		userVocabulariesTable: newUserVocabulariesTableImpl(schemaName, tableName, alias),
		EXCLUDED:              newUserVocabulariesTableImpl("", "excluded", ""),
	}
}

func newUserVocabulariesTableImpl(schemaName, tableName, alias string) userVocabulariesTable {
	var (
		IDColumn           = postgres.StringColumn("id")
		UserIDColumn       = postgres.StringColumn("user_id")
		VocabularyIDColumn = postgres.StringColumn("vocabulary_id")
		ValueColumn        = postgres.StringColumn("value")
		CreatedAtColumn    = postgres.TimestampzColumn("created_at")
		allColumns         = postgres.ColumnList{IDColumn, UserIDColumn, VocabularyIDColumn, ValueColumn, CreatedAtColumn}
		mutableColumns     = postgres.ColumnList{UserIDColumn, VocabularyIDColumn, ValueColumn, CreatedAtColumn}
	)

	return userVocabulariesTable{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:           IDColumn,
		UserID:       UserIDColumn,
		VocabularyID: VocabularyIDColumn,
		Value:        ValueColumn,
		CreatedAt:    CreatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
