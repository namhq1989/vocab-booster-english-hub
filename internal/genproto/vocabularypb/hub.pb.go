// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        (unknown)
// source: vocabularypb/hub.proto

package vocabularypb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SearchVocabularyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PerformerId string `protobuf:"bytes,1,opt,name=performerId,proto3" json:"performerId,omitempty"`
	Term        string `protobuf:"bytes,2,opt,name=term,proto3" json:"term,omitempty"`
}

func (x *SearchVocabularyRequest) Reset() {
	*x = SearchVocabularyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vocabularypb_hub_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchVocabularyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchVocabularyRequest) ProtoMessage() {}

func (x *SearchVocabularyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vocabularypb_hub_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchVocabularyRequest.ProtoReflect.Descriptor instead.
func (*SearchVocabularyRequest) Descriptor() ([]byte, []int) {
	return file_vocabularypb_hub_proto_rawDescGZIP(), []int{0}
}

func (x *SearchVocabularyRequest) GetPerformerId() string {
	if x != nil {
		return x.PerformerId
	}
	return ""
}

func (x *SearchVocabularyRequest) GetTerm() string {
	if x != nil {
		return x.Term
	}
	return ""
}

type SearchVocabularyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Found       bool        `protobuf:"varint,1,opt,name=found,proto3" json:"found,omitempty"`
	Suggestions []string    `protobuf:"bytes,2,rep,name=suggestions,proto3" json:"suggestions,omitempty"`
	Vocabulary  *Vocabulary `protobuf:"bytes,3,opt,name=vocabulary,proto3" json:"vocabulary,omitempty"`
}

func (x *SearchVocabularyResponse) Reset() {
	*x = SearchVocabularyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vocabularypb_hub_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchVocabularyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchVocabularyResponse) ProtoMessage() {}

func (x *SearchVocabularyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vocabularypb_hub_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchVocabularyResponse.ProtoReflect.Descriptor instead.
func (*SearchVocabularyResponse) Descriptor() ([]byte, []int) {
	return file_vocabularypb_hub_proto_rawDescGZIP(), []int{1}
}

func (x *SearchVocabularyResponse) GetFound() bool {
	if x != nil {
		return x.Found
	}
	return false
}

func (x *SearchVocabularyResponse) GetSuggestions() []string {
	if x != nil {
		return x.Suggestions
	}
	return nil
}

func (x *SearchVocabularyResponse) GetVocabulary() *Vocabulary {
	if x != nil {
		return x.Vocabulary
	}
	return nil
}

type CreateCommunitySentenceDraftRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId       string   `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	VocabularyId string   `protobuf:"bytes,2,opt,name=vocabularyId,proto3" json:"vocabularyId,omitempty"`
	Lang         string   `protobuf:"bytes,3,opt,name=lang,proto3" json:"lang,omitempty"`
	Sentence     string   `protobuf:"bytes,4,opt,name=sentence,proto3" json:"sentence,omitempty"`
	Vocabulary   []string `protobuf:"bytes,5,rep,name=vocabulary,proto3" json:"vocabulary,omitempty"`
	Tense        string   `protobuf:"bytes,6,opt,name=tense,proto3" json:"tense,omitempty"`
}

func (x *CreateCommunitySentenceDraftRequest) Reset() {
	*x = CreateCommunitySentenceDraftRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vocabularypb_hub_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCommunitySentenceDraftRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCommunitySentenceDraftRequest) ProtoMessage() {}

func (x *CreateCommunitySentenceDraftRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vocabularypb_hub_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCommunitySentenceDraftRequest.ProtoReflect.Descriptor instead.
func (*CreateCommunitySentenceDraftRequest) Descriptor() ([]byte, []int) {
	return file_vocabularypb_hub_proto_rawDescGZIP(), []int{2}
}

func (x *CreateCommunitySentenceDraftRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateCommunitySentenceDraftRequest) GetVocabularyId() string {
	if x != nil {
		return x.VocabularyId
	}
	return ""
}

func (x *CreateCommunitySentenceDraftRequest) GetLang() string {
	if x != nil {
		return x.Lang
	}
	return ""
}

func (x *CreateCommunitySentenceDraftRequest) GetSentence() string {
	if x != nil {
		return x.Sentence
	}
	return ""
}

func (x *CreateCommunitySentenceDraftRequest) GetVocabulary() []string {
	if x != nil {
		return x.Vocabulary
	}
	return nil
}

func (x *CreateCommunitySentenceDraftRequest) GetTense() string {
	if x != nil {
		return x.Tense
	}
	return ""
}

type CreateCommunitySentenceDraftResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *CreateCommunitySentenceDraftResponse) Reset() {
	*x = CreateCommunitySentenceDraftResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vocabularypb_hub_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCommunitySentenceDraftResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCommunitySentenceDraftResponse) ProtoMessage() {}

func (x *CreateCommunitySentenceDraftResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vocabularypb_hub_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCommunitySentenceDraftResponse.ProtoReflect.Descriptor instead.
func (*CreateCommunitySentenceDraftResponse) Descriptor() ([]byte, []int) {
	return file_vocabularypb_hub_proto_rawDescGZIP(), []int{3}
}

func (x *CreateCommunitySentenceDraftResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type UpdateCommunitySentenceDraftRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	SentenceId string `protobuf:"bytes,2,opt,name=sentenceId,proto3" json:"sentenceId,omitempty"`
	Lang       string `protobuf:"bytes,3,opt,name=lang,proto3" json:"lang,omitempty"`
	Sentence   string `protobuf:"bytes,4,opt,name=sentence,proto3" json:"sentence,omitempty"`
}

func (x *UpdateCommunitySentenceDraftRequest) Reset() {
	*x = UpdateCommunitySentenceDraftRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vocabularypb_hub_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCommunitySentenceDraftRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCommunitySentenceDraftRequest) ProtoMessage() {}

func (x *UpdateCommunitySentenceDraftRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vocabularypb_hub_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCommunitySentenceDraftRequest.ProtoReflect.Descriptor instead.
func (*UpdateCommunitySentenceDraftRequest) Descriptor() ([]byte, []int) {
	return file_vocabularypb_hub_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateCommunitySentenceDraftRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UpdateCommunitySentenceDraftRequest) GetSentenceId() string {
	if x != nil {
		return x.SentenceId
	}
	return ""
}

func (x *UpdateCommunitySentenceDraftRequest) GetLang() string {
	if x != nil {
		return x.Lang
	}
	return ""
}

func (x *UpdateCommunitySentenceDraftRequest) GetSentence() string {
	if x != nil {
		return x.Sentence
	}
	return ""
}

type UpdateCommunitySentenceDraftResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpdateCommunitySentenceDraftResponse) Reset() {
	*x = UpdateCommunitySentenceDraftResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vocabularypb_hub_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCommunitySentenceDraftResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCommunitySentenceDraftResponse) ProtoMessage() {}

func (x *UpdateCommunitySentenceDraftResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vocabularypb_hub_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCommunitySentenceDraftResponse.ProtoReflect.Descriptor instead.
func (*UpdateCommunitySentenceDraftResponse) Descriptor() ([]byte, []int) {
	return file_vocabularypb_hub_proto_rawDescGZIP(), []int{5}
}

type PromoteCommunitySentenceDraftRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	SentenceId string `protobuf:"bytes,2,opt,name=sentenceId,proto3" json:"sentenceId,omitempty"`
}

func (x *PromoteCommunitySentenceDraftRequest) Reset() {
	*x = PromoteCommunitySentenceDraftRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vocabularypb_hub_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PromoteCommunitySentenceDraftRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PromoteCommunitySentenceDraftRequest) ProtoMessage() {}

func (x *PromoteCommunitySentenceDraftRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vocabularypb_hub_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PromoteCommunitySentenceDraftRequest.ProtoReflect.Descriptor instead.
func (*PromoteCommunitySentenceDraftRequest) Descriptor() ([]byte, []int) {
	return file_vocabularypb_hub_proto_rawDescGZIP(), []int{6}
}

func (x *PromoteCommunitySentenceDraftRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *PromoteCommunitySentenceDraftRequest) GetSentenceId() string {
	if x != nil {
		return x.SentenceId
	}
	return ""
}

type PromoteCommunitySentenceDraftResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PromoteCommunitySentenceDraftResponse) Reset() {
	*x = PromoteCommunitySentenceDraftResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vocabularypb_hub_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PromoteCommunitySentenceDraftResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PromoteCommunitySentenceDraftResponse) ProtoMessage() {}

func (x *PromoteCommunitySentenceDraftResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vocabularypb_hub_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PromoteCommunitySentenceDraftResponse.ProtoReflect.Descriptor instead.
func (*PromoteCommunitySentenceDraftResponse) Descriptor() ([]byte, []int) {
	return file_vocabularypb_hub_proto_rawDescGZIP(), []int{7}
}

type LikeCommunitySentenceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	SentenceId string `protobuf:"bytes,2,opt,name=sentenceId,proto3" json:"sentenceId,omitempty"`
}

func (x *LikeCommunitySentenceRequest) Reset() {
	*x = LikeCommunitySentenceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vocabularypb_hub_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LikeCommunitySentenceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LikeCommunitySentenceRequest) ProtoMessage() {}

func (x *LikeCommunitySentenceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vocabularypb_hub_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LikeCommunitySentenceRequest.ProtoReflect.Descriptor instead.
func (*LikeCommunitySentenceRequest) Descriptor() ([]byte, []int) {
	return file_vocabularypb_hub_proto_rawDescGZIP(), []int{8}
}

func (x *LikeCommunitySentenceRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *LikeCommunitySentenceRequest) GetSentenceId() string {
	if x != nil {
		return x.SentenceId
	}
	return ""
}

type LikeCommunitySentenceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsLiked bool `protobuf:"varint,1,opt,name=isLiked,proto3" json:"isLiked,omitempty"`
}

func (x *LikeCommunitySentenceResponse) Reset() {
	*x = LikeCommunitySentenceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vocabularypb_hub_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LikeCommunitySentenceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LikeCommunitySentenceResponse) ProtoMessage() {}

func (x *LikeCommunitySentenceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vocabularypb_hub_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LikeCommunitySentenceResponse.ProtoReflect.Descriptor instead.
func (*LikeCommunitySentenceResponse) Descriptor() ([]byte, []int) {
	return file_vocabularypb_hub_proto_rawDescGZIP(), []int{9}
}

func (x *LikeCommunitySentenceResponse) GetIsLiked() bool {
	if x != nil {
		return x.IsLiked
	}
	return false
}

type GetVocabularyCommunitySentencesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VocabularyId string `protobuf:"bytes,1,opt,name=vocabularyId,proto3" json:"vocabularyId,omitempty"`
	UserId       string `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`
	Lang         string `protobuf:"bytes,3,opt,name=lang,proto3" json:"lang,omitempty"`
	PageToken    string `protobuf:"bytes,4,opt,name=pageToken,proto3" json:"pageToken,omitempty"`
}

func (x *GetVocabularyCommunitySentencesRequest) Reset() {
	*x = GetVocabularyCommunitySentencesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vocabularypb_hub_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVocabularyCommunitySentencesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVocabularyCommunitySentencesRequest) ProtoMessage() {}

func (x *GetVocabularyCommunitySentencesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vocabularypb_hub_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVocabularyCommunitySentencesRequest.ProtoReflect.Descriptor instead.
func (*GetVocabularyCommunitySentencesRequest) Descriptor() ([]byte, []int) {
	return file_vocabularypb_hub_proto_rawDescGZIP(), []int{10}
}

func (x *GetVocabularyCommunitySentencesRequest) GetVocabularyId() string {
	if x != nil {
		return x.VocabularyId
	}
	return ""
}

func (x *GetVocabularyCommunitySentencesRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetVocabularyCommunitySentencesRequest) GetLang() string {
	if x != nil {
		return x.Lang
	}
	return ""
}

func (x *GetVocabularyCommunitySentencesRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type GetVocabularyCommunitySentencesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sentences     []*CommunitySentenceBrief `protobuf:"bytes,1,rep,name=sentences,proto3" json:"sentences,omitempty"`
	NextPageToken string                    `protobuf:"bytes,2,opt,name=nextPageToken,proto3" json:"nextPageToken,omitempty"`
}

func (x *GetVocabularyCommunitySentencesResponse) Reset() {
	*x = GetVocabularyCommunitySentencesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vocabularypb_hub_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVocabularyCommunitySentencesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVocabularyCommunitySentencesResponse) ProtoMessage() {}

func (x *GetVocabularyCommunitySentencesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vocabularypb_hub_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVocabularyCommunitySentencesResponse.ProtoReflect.Descriptor instead.
func (*GetVocabularyCommunitySentencesResponse) Descriptor() ([]byte, []int) {
	return file_vocabularypb_hub_proto_rawDescGZIP(), []int{11}
}

func (x *GetVocabularyCommunitySentencesResponse) GetSentences() []*CommunitySentenceBrief {
	if x != nil {
		return x.Sentences
	}
	return nil
}

func (x *GetVocabularyCommunitySentencesResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type GetVocabularyCommunitySentenceByIDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VocabularyId string `protobuf:"bytes,1,opt,name=vocabularyId,proto3" json:"vocabularyId,omitempty"`
	UserId       string `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (x *GetVocabularyCommunitySentenceByIDRequest) Reset() {
	*x = GetVocabularyCommunitySentenceByIDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vocabularypb_hub_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVocabularyCommunitySentenceByIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVocabularyCommunitySentenceByIDRequest) ProtoMessage() {}

func (x *GetVocabularyCommunitySentenceByIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vocabularypb_hub_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVocabularyCommunitySentenceByIDRequest.ProtoReflect.Descriptor instead.
func (*GetVocabularyCommunitySentenceByIDRequest) Descriptor() ([]byte, []int) {
	return file_vocabularypb_hub_proto_rawDescGZIP(), []int{12}
}

func (x *GetVocabularyCommunitySentenceByIDRequest) GetVocabularyId() string {
	if x != nil {
		return x.VocabularyId
	}
	return ""
}

func (x *GetVocabularyCommunitySentenceByIDRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type GetVocabularyCommunitySentenceByIDResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sentence []*CommunitySentence `protobuf:"bytes,1,rep,name=sentence,proto3" json:"sentence,omitempty"`
}

func (x *GetVocabularyCommunitySentenceByIDResponse) Reset() {
	*x = GetVocabularyCommunitySentenceByIDResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vocabularypb_hub_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVocabularyCommunitySentenceByIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVocabularyCommunitySentenceByIDResponse) ProtoMessage() {}

func (x *GetVocabularyCommunitySentenceByIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vocabularypb_hub_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVocabularyCommunitySentenceByIDResponse.ProtoReflect.Descriptor instead.
func (*GetVocabularyCommunitySentenceByIDResponse) Descriptor() ([]byte, []int) {
	return file_vocabularypb_hub_proto_rawDescGZIP(), []int{13}
}

func (x *GetVocabularyCommunitySentenceByIDResponse) GetSentence() []*CommunitySentence {
	if x != nil {
		return x.Sentence
	}
	return nil
}

type BookmarkVocabularyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId       string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	VocabularyId string `protobuf:"bytes,2,opt,name=vocabularyId,proto3" json:"vocabularyId,omitempty"`
}

func (x *BookmarkVocabularyRequest) Reset() {
	*x = BookmarkVocabularyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vocabularypb_hub_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BookmarkVocabularyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BookmarkVocabularyRequest) ProtoMessage() {}

func (x *BookmarkVocabularyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vocabularypb_hub_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BookmarkVocabularyRequest.ProtoReflect.Descriptor instead.
func (*BookmarkVocabularyRequest) Descriptor() ([]byte, []int) {
	return file_vocabularypb_hub_proto_rawDescGZIP(), []int{14}
}

func (x *BookmarkVocabularyRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *BookmarkVocabularyRequest) GetVocabularyId() string {
	if x != nil {
		return x.VocabularyId
	}
	return ""
}

type BookmarkVocabularyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsBookmarked bool `protobuf:"varint,1,opt,name=isBookmarked,proto3" json:"isBookmarked,omitempty"`
}

func (x *BookmarkVocabularyResponse) Reset() {
	*x = BookmarkVocabularyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vocabularypb_hub_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BookmarkVocabularyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BookmarkVocabularyResponse) ProtoMessage() {}

func (x *BookmarkVocabularyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vocabularypb_hub_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BookmarkVocabularyResponse.ProtoReflect.Descriptor instead.
func (*BookmarkVocabularyResponse) Descriptor() ([]byte, []int) {
	return file_vocabularypb_hub_proto_rawDescGZIP(), []int{15}
}

func (x *BookmarkVocabularyResponse) GetIsBookmarked() bool {
	if x != nil {
		return x.IsBookmarked
	}
	return false
}

type GetUserBookmarkedVocabulariesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	PageToken string `protobuf:"bytes,2,opt,name=pageToken,proto3" json:"pageToken,omitempty"`
}

func (x *GetUserBookmarkedVocabulariesRequest) Reset() {
	*x = GetUserBookmarkedVocabulariesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vocabularypb_hub_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserBookmarkedVocabulariesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserBookmarkedVocabulariesRequest) ProtoMessage() {}

func (x *GetUserBookmarkedVocabulariesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vocabularypb_hub_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserBookmarkedVocabulariesRequest.ProtoReflect.Descriptor instead.
func (*GetUserBookmarkedVocabulariesRequest) Descriptor() ([]byte, []int) {
	return file_vocabularypb_hub_proto_rawDescGZIP(), []int{16}
}

func (x *GetUserBookmarkedVocabulariesRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetUserBookmarkedVocabulariesRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type GetUserBookmarkedVocabulariesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vocabularies  []*VocabularyBrief `protobuf:"bytes,1,rep,name=vocabularies,proto3" json:"vocabularies,omitempty"`
	NextPageToken string             `protobuf:"bytes,2,opt,name=nextPageToken,proto3" json:"nextPageToken,omitempty"`
}

func (x *GetUserBookmarkedVocabulariesResponse) Reset() {
	*x = GetUserBookmarkedVocabulariesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vocabularypb_hub_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserBookmarkedVocabulariesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserBookmarkedVocabulariesResponse) ProtoMessage() {}

func (x *GetUserBookmarkedVocabulariesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vocabularypb_hub_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserBookmarkedVocabulariesResponse.ProtoReflect.Descriptor instead.
func (*GetUserBookmarkedVocabulariesResponse) Descriptor() ([]byte, []int) {
	return file_vocabularypb_hub_proto_rawDescGZIP(), []int{17}
}

func (x *GetUserBookmarkedVocabulariesResponse) GetVocabularies() []*VocabularyBrief {
	if x != nil {
		return x.Vocabularies
	}
	return nil
}

func (x *GetUserBookmarkedVocabulariesResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type GetWordOfTheDayRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lang string `protobuf:"bytes,1,opt,name=lang,proto3" json:"lang,omitempty"`
}

func (x *GetWordOfTheDayRequest) Reset() {
	*x = GetWordOfTheDayRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vocabularypb_hub_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWordOfTheDayRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWordOfTheDayRequest) ProtoMessage() {}

func (x *GetWordOfTheDayRequest) ProtoReflect() protoreflect.Message {
	mi := &file_vocabularypb_hub_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWordOfTheDayRequest.ProtoReflect.Descriptor instead.
func (*GetWordOfTheDayRequest) Descriptor() ([]byte, []int) {
	return file_vocabularypb_hub_proto_rawDescGZIP(), []int{18}
}

func (x *GetWordOfTheDayRequest) GetLang() string {
	if x != nil {
		return x.Lang
	}
	return ""
}

type GetWordOfTheDayResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vocabulary  *VocabularyBrief `protobuf:"bytes,1,opt,name=vocabulary,proto3" json:"vocabulary,omitempty"`
	Information *Multilingual    `protobuf:"bytes,2,opt,name=information,proto3" json:"information,omitempty"`
}

func (x *GetWordOfTheDayResponse) Reset() {
	*x = GetWordOfTheDayResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_vocabularypb_hub_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWordOfTheDayResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWordOfTheDayResponse) ProtoMessage() {}

func (x *GetWordOfTheDayResponse) ProtoReflect() protoreflect.Message {
	mi := &file_vocabularypb_hub_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWordOfTheDayResponse.ProtoReflect.Descriptor instead.
func (*GetWordOfTheDayResponse) Descriptor() ([]byte, []int) {
	return file_vocabularypb_hub_proto_rawDescGZIP(), []int{19}
}

func (x *GetWordOfTheDayResponse) GetVocabulary() *VocabularyBrief {
	if x != nil {
		return x.Vocabulary
	}
	return nil
}

func (x *GetWordOfTheDayResponse) GetInformation() *Multilingual {
	if x != nil {
		return x.Information
	}
	return nil
}

var File_vocabularypb_hub_proto protoreflect.FileDescriptor

var file_vocabularypb_hub_proto_rawDesc = []byte{
	0x0a, 0x16, 0x76, 0x6f, 0x63, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x79, 0x70, 0x62, 0x2f, 0x68,
	0x75, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x76, 0x6f, 0x63, 0x61, 0x62, 0x75,
	0x6c, 0x61, 0x72, 0x79, 0x70, 0x62, 0x1a, 0x1a, 0x76, 0x6f, 0x63, 0x61, 0x62, 0x75, 0x6c, 0x61,
	0x72, 0x79, 0x70, 0x62, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x4f, 0x0a, 0x17, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x56, 0x6f, 0x63, 0x61,
	0x62, 0x75, 0x6c, 0x61, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a,
	0x0b, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x65, 0x72, 0x6d, 0x22, 0x8c, 0x01, 0x0a, 0x18, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x56, 0x6f,
	0x63, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x75, 0x67,
	0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x38, 0x0a, 0x0a, 0x76, 0x6f, 0x63, 0x61,
	0x62, 0x75, 0x6c, 0x61, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x76,
	0x6f, 0x63, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x79, 0x70, 0x62, 0x2e, 0x56, 0x6f, 0x63, 0x61,
	0x62, 0x75, 0x6c, 0x61, 0x72, 0x79, 0x52, 0x0a, 0x76, 0x6f, 0x63, 0x61, 0x62, 0x75, 0x6c, 0x61,
	0x72, 0x79, 0x22, 0xc7, 0x01, 0x0a, 0x23, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x53, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x44, 0x72,
	0x61, 0x66, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x76, 0x6f, 0x63, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x79,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x76, 0x6f, 0x63, 0x61, 0x62, 0x75,
	0x6c, 0x61, 0x72, 0x79, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65,
	0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65,
	0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x76, 0x6f, 0x63, 0x61, 0x62, 0x75,
	0x6c, 0x61, 0x72, 0x79, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x6f, 0x63, 0x61,
	0x62, 0x75, 0x6c, 0x61, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x65, 0x6e, 0x73, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x65, 0x6e, 0x73, 0x65, 0x22, 0x36, 0x0a, 0x24,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x53,
	0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x44, 0x72, 0x61, 0x66, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x22, 0x8d, 0x01, 0x0a, 0x23, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x53, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65,
	0x44, 0x72, 0x61, 0x66, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e,
	0x63, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x6e, 0x74,
	0x65, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x6e, 0x74,
	0x65, 0x6e, 0x63, 0x65, 0x22, 0x26, 0x0a, 0x24, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x53, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x44,
	0x72, 0x61, 0x66, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5e, 0x0a, 0x24,
	0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79,
	0x53, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x44, 0x72, 0x61, 0x66, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a,
	0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x22, 0x27, 0x0a, 0x25,
	0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79,
	0x53, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x44, 0x72, 0x61, 0x66, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x56, 0x0a, 0x1c, 0x4c, 0x69, 0x6b, 0x65, 0x43, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x53, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x22, 0x39, 0x0a,
	0x1d, 0x4c, 0x69, 0x6b, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x53, 0x65,
	0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x69, 0x73, 0x4c, 0x69, 0x6b, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x69, 0x73, 0x4c, 0x69, 0x6b, 0x65, 0x64, 0x22, 0x96, 0x01, 0x0a, 0x26, 0x47, 0x65, 0x74,
	0x56, 0x6f, 0x63, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x74, 0x79, 0x53, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x76, 0x6f, 0x63, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72,
	0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x76, 0x6f, 0x63, 0x61, 0x62,
	0x75, 0x6c, 0x61, 0x72, 0x79, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c,
	0x61, 0x6e, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x22, 0x93, 0x01, 0x0a, 0x27, 0x47, 0x65, 0x74, 0x56, 0x6f, 0x63, 0x61, 0x62, 0x75, 0x6c,
	0x61, 0x72, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x53, 0x65, 0x6e, 0x74,
	0x65, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a,
	0x09, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x76, 0x6f, 0x63, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x79, 0x70, 0x62, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x53, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63,
	0x65, 0x42, 0x72, 0x69, 0x65, 0x66, 0x52, 0x09, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65,
	0x73, 0x12, 0x24, 0x0a, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61,
	0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x67, 0x0a, 0x29, 0x47, 0x65, 0x74, 0x56, 0x6f,
	0x63, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74,
	0x79, 0x53, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x76, 0x6f, 0x63, 0x61, 0x62, 0x75, 0x6c, 0x61,
	0x72, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x76, 0x6f, 0x63, 0x61,
	0x62, 0x75, 0x6c, 0x61, 0x72, 0x79, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x22, 0x69, 0x0a, 0x2a, 0x47, 0x65, 0x74, 0x56, 0x6f, 0x63, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72,
	0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x53, 0x65, 0x6e, 0x74, 0x65, 0x6e,
	0x63, 0x65, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b,
	0x0a, 0x08, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x76, 0x6f, 0x63, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x79, 0x70, 0x62, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x53, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63,
	0x65, 0x52, 0x08, 0x73, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x22, 0x57, 0x0a, 0x19, 0x42,
	0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x56, 0x6f, 0x63, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x22, 0x0a, 0x0c, 0x76, 0x6f, 0x63, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x79, 0x49, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x76, 0x6f, 0x63, 0x61, 0x62, 0x75, 0x6c, 0x61,
	0x72, 0x79, 0x49, 0x64, 0x22, 0x40, 0x0a, 0x1a, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b,
	0x56, 0x6f, 0x63, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x73, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x42, 0x6f, 0x6f, 0x6b,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x64, 0x22, 0x5c, 0x0a, 0x24, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x64, 0x56, 0x6f, 0x63, 0x61, 0x62,
	0x75, 0x6c, 0x61, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x90, 0x01, 0x0a, 0x25, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x64, 0x56, 0x6f, 0x63, 0x61, 0x62, 0x75,
	0x6c, 0x61, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41,
	0x0a, 0x0c, 0x76, 0x6f, 0x63, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x76, 0x6f, 0x63, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72,
	0x79, 0x70, 0x62, 0x2e, 0x56, 0x6f, 0x63, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x79, 0x42, 0x72,
	0x69, 0x65, 0x66, 0x52, 0x0c, 0x76, 0x6f, 0x63, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x65,
	0x73, 0x12, 0x24, 0x0a, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61,
	0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x2c, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x57, 0x6f,
	0x72, 0x64, 0x4f, 0x66, 0x54, 0x68, 0x65, 0x44, 0x61, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x61, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6c, 0x61, 0x6e, 0x67, 0x22, 0x96, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72,
	0x64, 0x4f, 0x66, 0x54, 0x68, 0x65, 0x44, 0x61, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x3d, 0x0a, 0x0a, 0x76, 0x6f, 0x63, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x76, 0x6f, 0x63, 0x61, 0x62, 0x75, 0x6c, 0x61,
	0x72, 0x79, 0x70, 0x62, 0x2e, 0x56, 0x6f, 0x63, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x79, 0x42,
	0x72, 0x69, 0x65, 0x66, 0x52, 0x0a, 0x76, 0x6f, 0x63, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x79,
	0x12, 0x3c, 0x0a, 0x0b, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x76, 0x6f, 0x63, 0x61, 0x62, 0x75, 0x6c, 0x61,
	0x72, 0x79, 0x70, 0x62, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x75, 0x61,
	0x6c, 0x52, 0x0b, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x32, 0x96,
	0x0a, 0x0a, 0x11, 0x56, 0x6f, 0x63, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x79, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x63, 0x0a, 0x10, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x56, 0x6f,
	0x63, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x79, 0x12, 0x25, 0x2e, 0x76, 0x6f, 0x63, 0x61, 0x62,
	0x75, 0x6c, 0x61, 0x72, 0x79, 0x70, 0x62, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x56, 0x6f,
	0x63, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x26, 0x2e, 0x76, 0x6f, 0x63, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x79, 0x70, 0x62, 0x2e, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x56, 0x6f, 0x63, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x87, 0x01, 0x0a, 0x1c, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x53, 0x65, 0x6e,
	0x74, 0x65, 0x6e, 0x63, 0x65, 0x44, 0x72, 0x61, 0x66, 0x74, 0x12, 0x31, 0x2e, 0x76, 0x6f, 0x63,
	0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x79, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x53, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63,
	0x65, 0x44, 0x72, 0x61, 0x66, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e,
	0x76, 0x6f, 0x63, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x79, 0x70, 0x62, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x53, 0x65, 0x6e, 0x74,
	0x65, 0x6e, 0x63, 0x65, 0x44, 0x72, 0x61, 0x66, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x87, 0x01, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x53, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x44,
	0x72, 0x61, 0x66, 0x74, 0x12, 0x31, 0x2e, 0x76, 0x6f, 0x63, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72,
	0x79, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x74, 0x79, 0x53, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x44, 0x72, 0x61, 0x66, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x76, 0x6f, 0x63, 0x61, 0x62, 0x75,
	0x6c, 0x61, 0x72, 0x79, 0x70, 0x62, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d,
	0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x53, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x44, 0x72,
	0x61, 0x66, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8a, 0x01,
	0x0a, 0x1d, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x74, 0x79, 0x53, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x44, 0x72, 0x61, 0x66, 0x74, 0x12,
	0x32, 0x2e, 0x76, 0x6f, 0x63, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x79, 0x70, 0x62, 0x2e, 0x50,
	0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x53,
	0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x44, 0x72, 0x61, 0x66, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e, 0x76, 0x6f, 0x63, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x79,
	0x70, 0x62, 0x2e, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x74, 0x79, 0x53, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x44, 0x72, 0x61, 0x66, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x72, 0x0a, 0x15, 0x4c, 0x69,
	0x6b, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x53, 0x65, 0x6e, 0x74, 0x65,
	0x6e, 0x63, 0x65, 0x12, 0x2a, 0x2e, 0x76, 0x6f, 0x63, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x79,
	0x70, 0x62, 0x2e, 0x4c, 0x69, 0x6b, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79,
	0x53, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2b, 0x2e, 0x76, 0x6f, 0x63, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x79, 0x70, 0x62, 0x2e, 0x4c,
	0x69, 0x6b, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x53, 0x65, 0x6e, 0x74,
	0x65, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x90,
	0x01, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x56, 0x6f, 0x63, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x79,
	0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x53, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63,
	0x65, 0x73, 0x12, 0x34, 0x2e, 0x76, 0x6f, 0x63, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x79, 0x70,
	0x62, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x6f, 0x63, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x79, 0x43,
	0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x53, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x76, 0x6f, 0x63, 0x61, 0x62,
	0x75, 0x6c, 0x61, 0x72, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x6f, 0x63, 0x61, 0x62,
	0x75, 0x6c, 0x61, 0x72, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x53, 0x65,
	0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x99, 0x01, 0x0a, 0x22, 0x47, 0x65, 0x74, 0x56, 0x6f, 0x63, 0x61, 0x62, 0x75, 0x6c,
	0x61, 0x72, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x53, 0x65, 0x6e, 0x74,
	0x65, 0x6e, 0x63, 0x65, 0x42, 0x79, 0x49, 0x44, 0x12, 0x37, 0x2e, 0x76, 0x6f, 0x63, 0x61, 0x62,
	0x75, 0x6c, 0x61, 0x72, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x6f, 0x63, 0x61, 0x62,
	0x75, 0x6c, 0x61, 0x72, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x53, 0x65,
	0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x38, 0x2e, 0x76, 0x6f, 0x63, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x79, 0x70, 0x62,
	0x2e, 0x47, 0x65, 0x74, 0x56, 0x6f, 0x63, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x79, 0x43, 0x6f,
	0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x53, 0x65, 0x6e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x42,
	0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x69, 0x0a,
	0x12, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x56, 0x6f, 0x63, 0x61, 0x62, 0x75, 0x6c,
	0x61, 0x72, 0x79, 0x12, 0x27, 0x2e, 0x76, 0x6f, 0x63, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x79,
	0x70, 0x62, 0x2e, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x56, 0x6f, 0x63, 0x61, 0x62,
	0x75, 0x6c, 0x61, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x76,
	0x6f, 0x63, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x79, 0x70, 0x62, 0x2e, 0x42, 0x6f, 0x6f, 0x6b,
	0x6d, 0x61, 0x72, 0x6b, 0x56, 0x6f, 0x63, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8a, 0x01, 0x0a, 0x1d, 0x47, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x64, 0x56, 0x6f,
	0x63, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x65, 0x73, 0x12, 0x32, 0x2e, 0x76, 0x6f, 0x63,
	0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x64, 0x56, 0x6f, 0x63, 0x61, 0x62,
	0x75, 0x6c, 0x61, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33,
	0x2e, 0x76, 0x6f, 0x63, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x64, 0x56,
	0x6f, 0x63, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x64,
	0x4f, 0x66, 0x54, 0x68, 0x65, 0x44, 0x61, 0x79, 0x12, 0x24, 0x2e, 0x76, 0x6f, 0x63, 0x61, 0x62,
	0x75, 0x6c, 0x61, 0x72, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x6f, 0x72, 0x64, 0x4f,
	0x66, 0x54, 0x68, 0x65, 0x44, 0x61, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25,
	0x2e, 0x76, 0x6f, 0x63, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x79, 0x70, 0x62, 0x2e, 0x47, 0x65,
	0x74, 0x57, 0x6f, 0x72, 0x64, 0x4f, 0x66, 0x54, 0x68, 0x65, 0x44, 0x61, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0xb0, 0x01, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x2e,
	0x76, 0x6f, 0x63, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x79, 0x70, 0x62, 0x42, 0x08, 0x48, 0x75,
	0x62, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x42, 0x76, 0x6f, 0x63, 0x61, 0x62, 0x2d,
	0x62, 0x6f, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x2d, 0x65, 0x6e, 0x67, 0x6c, 0x69, 0x73, 0x68, 0x2d,
	0x68, 0x75, 0x62, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x76, 0x6f, 0x63, 0x61, 0x62, 0x75, 0x6c, 0x61,
	0x72, 0x79, 0x2f, 0x76, 0x6f, 0x63, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x79, 0x70, 0x62, 0x2f,
	0x76, 0x6f, 0x63, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x79, 0x70, 0x62, 0xa2, 0x02, 0x03, 0x56,
	0x58, 0x58, 0xaa, 0x02, 0x0c, 0x56, 0x6f, 0x63, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x79, 0x70,
	0x62, 0xca, 0x02, 0x0c, 0x56, 0x6f, 0x63, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x79, 0x70, 0x62,
	0xe2, 0x02, 0x18, 0x56, 0x6f, 0x63, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x79, 0x70, 0x62, 0x5c,
	0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0c, 0x56, 0x6f,
	0x63, 0x61, 0x62, 0x75, 0x6c, 0x61, 0x72, 0x79, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_vocabularypb_hub_proto_rawDescOnce sync.Once
	file_vocabularypb_hub_proto_rawDescData = file_vocabularypb_hub_proto_rawDesc
)

func file_vocabularypb_hub_proto_rawDescGZIP() []byte {
	file_vocabularypb_hub_proto_rawDescOnce.Do(func() {
		file_vocabularypb_hub_proto_rawDescData = protoimpl.X.CompressGZIP(file_vocabularypb_hub_proto_rawDescData)
	})
	return file_vocabularypb_hub_proto_rawDescData
}

var file_vocabularypb_hub_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_vocabularypb_hub_proto_goTypes = []interface{}{
	(*SearchVocabularyRequest)(nil),                    // 0: vocabularypb.SearchVocabularyRequest
	(*SearchVocabularyResponse)(nil),                   // 1: vocabularypb.SearchVocabularyResponse
	(*CreateCommunitySentenceDraftRequest)(nil),        // 2: vocabularypb.CreateCommunitySentenceDraftRequest
	(*CreateCommunitySentenceDraftResponse)(nil),       // 3: vocabularypb.CreateCommunitySentenceDraftResponse
	(*UpdateCommunitySentenceDraftRequest)(nil),        // 4: vocabularypb.UpdateCommunitySentenceDraftRequest
	(*UpdateCommunitySentenceDraftResponse)(nil),       // 5: vocabularypb.UpdateCommunitySentenceDraftResponse
	(*PromoteCommunitySentenceDraftRequest)(nil),       // 6: vocabularypb.PromoteCommunitySentenceDraftRequest
	(*PromoteCommunitySentenceDraftResponse)(nil),      // 7: vocabularypb.PromoteCommunitySentenceDraftResponse
	(*LikeCommunitySentenceRequest)(nil),               // 8: vocabularypb.LikeCommunitySentenceRequest
	(*LikeCommunitySentenceResponse)(nil),              // 9: vocabularypb.LikeCommunitySentenceResponse
	(*GetVocabularyCommunitySentencesRequest)(nil),     // 10: vocabularypb.GetVocabularyCommunitySentencesRequest
	(*GetVocabularyCommunitySentencesResponse)(nil),    // 11: vocabularypb.GetVocabularyCommunitySentencesResponse
	(*GetVocabularyCommunitySentenceByIDRequest)(nil),  // 12: vocabularypb.GetVocabularyCommunitySentenceByIDRequest
	(*GetVocabularyCommunitySentenceByIDResponse)(nil), // 13: vocabularypb.GetVocabularyCommunitySentenceByIDResponse
	(*BookmarkVocabularyRequest)(nil),                  // 14: vocabularypb.BookmarkVocabularyRequest
	(*BookmarkVocabularyResponse)(nil),                 // 15: vocabularypb.BookmarkVocabularyResponse
	(*GetUserBookmarkedVocabulariesRequest)(nil),       // 16: vocabularypb.GetUserBookmarkedVocabulariesRequest
	(*GetUserBookmarkedVocabulariesResponse)(nil),      // 17: vocabularypb.GetUserBookmarkedVocabulariesResponse
	(*GetWordOfTheDayRequest)(nil),                     // 18: vocabularypb.GetWordOfTheDayRequest
	(*GetWordOfTheDayResponse)(nil),                    // 19: vocabularypb.GetWordOfTheDayResponse
	(*Vocabulary)(nil),                                 // 20: vocabularypb.Vocabulary
	(*CommunitySentenceBrief)(nil),                     // 21: vocabularypb.CommunitySentenceBrief
	(*CommunitySentence)(nil),                          // 22: vocabularypb.CommunitySentence
	(*VocabularyBrief)(nil),                            // 23: vocabularypb.VocabularyBrief
	(*Multilingual)(nil),                               // 24: vocabularypb.Multilingual
}
var file_vocabularypb_hub_proto_depIdxs = []int32{
	20, // 0: vocabularypb.SearchVocabularyResponse.vocabulary:type_name -> vocabularypb.Vocabulary
	21, // 1: vocabularypb.GetVocabularyCommunitySentencesResponse.sentences:type_name -> vocabularypb.CommunitySentenceBrief
	22, // 2: vocabularypb.GetVocabularyCommunitySentenceByIDResponse.sentence:type_name -> vocabularypb.CommunitySentence
	23, // 3: vocabularypb.GetUserBookmarkedVocabulariesResponse.vocabularies:type_name -> vocabularypb.VocabularyBrief
	23, // 4: vocabularypb.GetWordOfTheDayResponse.vocabulary:type_name -> vocabularypb.VocabularyBrief
	24, // 5: vocabularypb.GetWordOfTheDayResponse.information:type_name -> vocabularypb.Multilingual
	0,  // 6: vocabularypb.VocabularyService.SearchVocabulary:input_type -> vocabularypb.SearchVocabularyRequest
	2,  // 7: vocabularypb.VocabularyService.CreateCommunitySentenceDraft:input_type -> vocabularypb.CreateCommunitySentenceDraftRequest
	4,  // 8: vocabularypb.VocabularyService.UpdateCommunitySentenceDraft:input_type -> vocabularypb.UpdateCommunitySentenceDraftRequest
	6,  // 9: vocabularypb.VocabularyService.PromoteCommunitySentenceDraft:input_type -> vocabularypb.PromoteCommunitySentenceDraftRequest
	8,  // 10: vocabularypb.VocabularyService.LikeCommunitySentence:input_type -> vocabularypb.LikeCommunitySentenceRequest
	10, // 11: vocabularypb.VocabularyService.GetVocabularyCommunitySentences:input_type -> vocabularypb.GetVocabularyCommunitySentencesRequest
	12, // 12: vocabularypb.VocabularyService.GetVocabularyCommunitySentenceByID:input_type -> vocabularypb.GetVocabularyCommunitySentenceByIDRequest
	14, // 13: vocabularypb.VocabularyService.BookmarkVocabulary:input_type -> vocabularypb.BookmarkVocabularyRequest
	16, // 14: vocabularypb.VocabularyService.GetUserBookmarkedVocabularies:input_type -> vocabularypb.GetUserBookmarkedVocabulariesRequest
	18, // 15: vocabularypb.VocabularyService.GetWordOfTheDay:input_type -> vocabularypb.GetWordOfTheDayRequest
	1,  // 16: vocabularypb.VocabularyService.SearchVocabulary:output_type -> vocabularypb.SearchVocabularyResponse
	3,  // 17: vocabularypb.VocabularyService.CreateCommunitySentenceDraft:output_type -> vocabularypb.CreateCommunitySentenceDraftResponse
	5,  // 18: vocabularypb.VocabularyService.UpdateCommunitySentenceDraft:output_type -> vocabularypb.UpdateCommunitySentenceDraftResponse
	7,  // 19: vocabularypb.VocabularyService.PromoteCommunitySentenceDraft:output_type -> vocabularypb.PromoteCommunitySentenceDraftResponse
	9,  // 20: vocabularypb.VocabularyService.LikeCommunitySentence:output_type -> vocabularypb.LikeCommunitySentenceResponse
	11, // 21: vocabularypb.VocabularyService.GetVocabularyCommunitySentences:output_type -> vocabularypb.GetVocabularyCommunitySentencesResponse
	13, // 22: vocabularypb.VocabularyService.GetVocabularyCommunitySentenceByID:output_type -> vocabularypb.GetVocabularyCommunitySentenceByIDResponse
	15, // 23: vocabularypb.VocabularyService.BookmarkVocabulary:output_type -> vocabularypb.BookmarkVocabularyResponse
	17, // 24: vocabularypb.VocabularyService.GetUserBookmarkedVocabularies:output_type -> vocabularypb.GetUserBookmarkedVocabulariesResponse
	19, // 25: vocabularypb.VocabularyService.GetWordOfTheDay:output_type -> vocabularypb.GetWordOfTheDayResponse
	16, // [16:26] is the sub-list for method output_type
	6,  // [6:16] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_vocabularypb_hub_proto_init() }
func file_vocabularypb_hub_proto_init() {
	if File_vocabularypb_hub_proto != nil {
		return
	}
	file_vocabularypb_message_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_vocabularypb_hub_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchVocabularyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vocabularypb_hub_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchVocabularyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vocabularypb_hub_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCommunitySentenceDraftRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vocabularypb_hub_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCommunitySentenceDraftResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vocabularypb_hub_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCommunitySentenceDraftRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vocabularypb_hub_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCommunitySentenceDraftResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vocabularypb_hub_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PromoteCommunitySentenceDraftRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vocabularypb_hub_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PromoteCommunitySentenceDraftResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vocabularypb_hub_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LikeCommunitySentenceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vocabularypb_hub_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LikeCommunitySentenceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vocabularypb_hub_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVocabularyCommunitySentencesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vocabularypb_hub_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVocabularyCommunitySentencesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vocabularypb_hub_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVocabularyCommunitySentenceByIDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vocabularypb_hub_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVocabularyCommunitySentenceByIDResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vocabularypb_hub_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BookmarkVocabularyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vocabularypb_hub_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BookmarkVocabularyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vocabularypb_hub_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserBookmarkedVocabulariesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vocabularypb_hub_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserBookmarkedVocabulariesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vocabularypb_hub_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWordOfTheDayRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_vocabularypb_hub_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWordOfTheDayResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_vocabularypb_hub_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_vocabularypb_hub_proto_goTypes,
		DependencyIndexes: file_vocabularypb_hub_proto_depIdxs,
		MessageInfos:      file_vocabularypb_hub_proto_msgTypes,
	}.Build()
	File_vocabularypb_hub_proto = out.File
	file_vocabularypb_hub_proto_rawDesc = nil
	file_vocabularypb_hub_proto_goTypes = nil
	file_vocabularypb_hub_proto_depIdxs = nil
}
